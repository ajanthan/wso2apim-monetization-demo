/*
 * Copyright (c) 2018 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
@App:name("APIM_BILLING_INFO_SUMMARY")
@App:description("Defines aggregations for api monotization")

@source(type='inMemory' , topic='APIM_REQUEST')
define stream Request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string,apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiCreator string, apiCreatorTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long, otherLatency long, gatewayType string, label string);

define stream throtleInfoBillingStream(apiName string, apiVersion string, subscriptionTier string, applicationName string, applicationOwner string, successCount int, exceedCount int, timestamp long);

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
define aggregation throttleInfoBillingAggregate
from throtleInfoBillingStream
select apiName, apiVersion, subscriptionTier, applicationName, applicationOwner, sum(successCount) as successCount, sum(exceedCount) as exceedCount
group by apiName, apiVersion, subscriptionTier, applicationName, applicationOwner
aggregate by timestamp every seconds...year;

from Request[throttledOut==false]
select apiName, apiVersion, apiTier as subscriptionTier, applicationName, applicationOwner, 1 as successCount, 0 as exceedCount, requestTimestamp as timestamp
group by apiName, apiVersion, apiTier, applicationName, applicationOwner 
insert into throtleInfoBillingStream;

from Request[throttledOut==true]
select apiName, apiVersion, apiTier as subscriptionTier, applicationName, applicationOwner, 0 as successCount, 1 as exceedCount, requestTimestamp as timestamp
group by apiName, apiVersion, apiTier, applicationName, applicationOwner
insert into throtleInfoBillingStream;
